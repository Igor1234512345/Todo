{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["todoItems","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","items","map","item","index","react_default","a","createElement","App_TodoItem","key","onDelete","bind","onSave","toggleComplete","className","App_AddItem","onAdd","updatedItems","filter","value","setState","newTaskName","push","name","completed","oldItem","newName","clickedItem","thisItem","React","Component","AddItem","_this3","fSubmit","e","preventDefault","console","log","datas","refs","data","act","length","myForm","reset","focus","infoMessage","_this4","title","ref","type","placeholder","onClick","i","align","onSubmit","handleSubmit","newItem","isInList","toUpperCase","TodoItem","_this5","editing","renderTodoItem","isCompleted","handleSave","defaultValue","onFocus","handleFocus","autoFocus","renderButtons","onCancel","onEdit","editingItem","target","select","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5f5ddfc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst todoItems = [\n\n\n]\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { todoItems }\n    }\n\n    render() {\n        let items = this.state.todoItems;\n        items = items.map((item, index) => {\n            return(<TodoItem item={item} key={index} onDelete={this.onDelete.bind(this)} onSave={this.onSave.bind(this)} toggleComplete={this.toggleComplete.bind(this)}/>)\n        });\n        return(\n            <div>\n                <h1 className=\"header\"> Hello</h1>\n                <AddItem onAdd={this.onAdd.bind(this)} items={this.state.todoItems} />\n                <ul className=\"todo-list\">\n                    {items}\n                </ul>\n            </div>\n        )\n    }\n\n    onDelete(item) {\n        var updatedItems = this.state.todoItems;\n        updatedItems = updatedItems.filter((value, index) => {\n            return item !== value;\n        });\n        this.setState({\n            todoItems: updatedItems\n        });\n    }\n\n    onAdd(newTaskName) {\n        var updatedItems = this.state.todoItems;\n        updatedItems.push({\n            name: newTaskName,\n            completed: false\n        });\n        this.setState({\n            todoItems: updatedItems\n        })\n    }\n\n    onSave(oldItem, newName) {\n        var thisItem = this.state.todoItems.filter((item) => item === oldItem)[0];\n        thisItem.name = newName;\n        this.setState({\n            todoItems: this.state.todoItems\n        })\n    }\n\n    toggleComplete(clickedItem) {\n        var thisItem = this.state.todoItems.filter((item) => item === clickedItem)[0];\n        thisItem.completed = !thisItem.completed;\n        this.setState({\n            todoItems: this.state.todoItems\n        })\n    }\n}\n\nclass AddItem extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            infoMessage: '',\n            act: 0,\n            index: '',\n            datas: []\n        }\n    }\n    componentDidMount(){\n        this.refs.name.focus();\n      }\n    \n      fSubmit = (e) =>{\n        e.preventDefault();\n        console.log('try');\n    \n        let datas = this.state.datas;\n        let name = this.refs.name.value;\n    \n\n         let data = {\n            name\n          }\n        if(this.state.act === 0){ \n            if(name.length==0)\n            { \n             \n        }\n        else\n        {\n          datas.push(data);\n        }\n\n        }else{                      \n          let index = this.state.index;\n          datas[index].name = name;\n       \n        }    \n    \n        this.setState({\n          datas: datas,\n          act: 0\n        });\n    \n        this.refs.myForm.reset();\n        this.refs.name.focus();\n      }\n    \n\n    \n\n   \n      \n    render() {\n        let datas = this.state.datas;\n        return(\n            <div className=\"App\">\n            <h2>{this.state.title}</h2>\n            <form ref=\"myForm\" className=\"myForm\">\n              <input type=\"text\" ref=\"name\" placeholder=\"your name\" className=\"formField\" />\n              <button onClick={(e)=>this.fSubmit(e)} className=\"myButton\">submit </button>\n            </form>\n            <pre>\n              {datas.map((data, i) =>\n                <li key={i} className=\"myList\">\n                  <h1 align=\"center\">Hello {data.name}</h1>\n\n                </li>\n              )}\n            </pre>\n        \n            <form className=\"add-item-form\" onSubmit={this.handleSubmit.bind(this)}>\n                <input className=\"add-item-input\" type=\"text\" placeholder=\"a new task to do...\" ref=\"newItem\" />\n                <input className=\"add-item-button\" type=\"submit\" value=\"add\" />\n                <p className=\"add-item-info\"> {this.state.infoMessage} </p>\n                \n            </form>\n            </div>\n    )\n  }\n\n  \n  handleSubmit(e) {\n    e.preventDefault()\n    const value = this.refs.newItem.value\n    const isInList = this.props.items.filter((item) => {\n        return item.name.toUpperCase() == value.toUpperCase()\n    }).length\n    console.log(isInList)\n\n    if (!value) {\n        this.setState({\n            infoMessage: 'you want to add an empty task?'\n        })\n    }  else {\n        this.props.onAdd(value);\n        this.refs.newItem.value = '';\n        this.setState({\n            infoMessage: ''\n        })\n    }\n  }\n\n}\n\nclass TodoItem extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editing: false\n        }\n    }\n\n    render() {\n        return(\n            <li className=\"todo-item\">\n                {this.renderTodoItem()}\n            </li>\n        )\n    }\n\n    renderTodoItem() {\n        var isCompleted = this.props.item.completed\n\n        if(this.state.editing) {\n            return (\n                <form className=\"todo-item-wrapper\" onSubmit={this.handleSave.bind(this)}>\n                    <input className=\"editing-form-input\" type=\"text\" ref=\"editingItem\" defaultValue={this.props.item.name} onFocus={this.handleFocus.bind(this)} autoFocus />\n                    {this.renderButtons()}\n                </form>\n            )\n        }\n\n        return (\n            <div className=\"todo-item-wrapper\">\n                <p className={isCompleted ? 'todo-item-name--completed' : 'todo-item-name' } onClick={this.props.toggleComplete.bind(this, this.props.item)}>{this.props.item.name}</p>\n                {this.renderButtons()}\n            </div>\n        )\n    }\n\n    renderButtons() {\n        if(this.state.editing) {\n            return(\n                <div>\n                    <button className=\"button\" type=\"button\" onClick={this.handleSave.bind(this)}> save </button>\n                    <button className=\"button\" type=\"button\" onClick={this.onCancel.bind(this)}> cancel </button>\n                </div>\n            )\n        }\n        return(\n            <div>\n                <button className=\"button\" type=\"button\" onClick={this.onEdit.bind(this)}> edit </button>\n                <button className=\"button\" type=\"button\" onClick={this.props.onDelete.bind(this, this.props.item)}> delete </button>\n            </div>\n        )\n    }\n\n    onEdit() {\n        this.setState ({\n            editing: true\n        })\n    }\n\n    onCancel() {\n        this.setState ({\n            editing: false\n        })\n    }\n\n    handleSave(e) {\n        e.preventDefault()\n        this.setState ({\n            editing: false\n        })\n        this.props.onSave(this.props.item, this.refs.editingItem.value)\n    }\n\n    handleFocus(e) {\n        e.target.select()\n    }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}